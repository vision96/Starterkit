'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _rtlcss = require('rtlcss');

var _rtlcss2 = _interopRequireDefault(_rtlcss);

var _webpackSources = require('webpack-sources');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WebpackRTLPlugin = function WebpackRTLPlugin() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? { filename: false, options: {} } : arguments[0];

  this.options = options;
};

WebpackRTLPlugin.prototype.apply = function (compiler) {
  var _this = this;

  compiler.plugin('emit', function (compilation, callback) {
    Object.keys(compilation.assets).forEach(function (asset) {
      if (_path2.default.extname(asset) === '.css') {
        var source = _rtlcss2.default.process(compilation.assets[asset].source(), _this.options.options);
        var filename = void 0;

        if (_this.options.filename) {
          filename = _this.options.filename;

          if (/\[contenthash\]/.test(_this.options.filename)) {
            var hash = (0, _crypto.createHash)('md5').update(source).digest('hex').substr(0, 10);
            filename = filename.replace('[contenthash]', hash);
          }
        } else {
          filename = _path2.default.basename(asset, '.css') + '.rtl.css';
        }

        compilation.assets[filename] = new _webpackSources.ConcatSource(source);
      }
    });

    callback();
  });
};

module.exports = WebpackRTLPlugin;